(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[498],{3905:function(e,t,n){"use strict";n.d(t,{kt:function(){return p}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"===typeof e?e(t):i(i({},t),e)),n},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,d=p["".concat(c,".").concat(m)]||p[m]||h[m]||s;return n?o.createElement(d,i(i({ref:t},u),{},{components:n})):o.createElement(d,i({ref:t},u))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"===typeof e||a){var s=n.length,i=new Array(s);i[0]=u;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"===typeof e?e:a,i[1]=r;for(var l=2;l<s;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},163:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/understanding-connections-pools",function(){return n(4955)}])},4955:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return r}});n(7294);var o=n(3905),a=n(9008);function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i={};function r(e){var t=e.components,n=s(e,["components"]);return(0,o.kt)("wrapper",Object.assign({},i,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(a.default,{mdxType:"Head"},(0,o.kt)("title",null,"Understanding Connections & Pools"),(0,o.kt)("meta",{name:"description",content:"What connections are, how they affect our systems, and how and why pooling works."})),(0,o.kt)("h1",null,"Understanding Connections & Pools"),(0,o.kt)("p",{className:"lead"},"What connections are, how they affect our systems, and how and why pooling works\u2014with notes on how popular applications servers and databases handle connections."),(0,o.kt)("p",null,"Connections are the hidden mechanism using which computer systems talk to each other\u2014and they've become so fundamental that we overlook how important they are, how they work, and when they fail. We're often ignorant of them until there's a problem, which usually shows up a massive failure when our systems are doing their most amount of work. But because they're present everywhere and are so important in pretty much every system, they're worth spending a little time understanding."),(0,o.kt)("h2",null,"What are connections?"),(0,o.kt)("p",null,"Connections are a link between two systems that allows them to exchange information as a sequence of zeroes and ones\u2014to send and receive bytes."),(0,o.kt)("p",null,"Depending on where the systems are running relative to each other, a combination of underlying software and hardware will work hard to handle the physical movement of information, which ",(0,o.kt)("em",{parentName:"p"},"abstracts")," it away. For example, if the communicating systems are two Unix processes, the ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://www.usna.edu/Users/cs/wcbrown/courses/IC221/classes/L13/Class.html"}),"IPC")," system will handle allocating memory for the data exchanged and will handle pick-up and delivery of the bytes on both sides. If the systems are running on different computers, they will likely communicate over ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:the-internet/xcae6f4a7ff015e7d:transporting-packets/a/transmission-control-protocol--tcp"}),"TCP"),", which will handle moving the data over a wired or wireless system between the computers. The details of how computers work together to reliably handle, transmit and receive the data is more a standardization problem, and most systems use the building blocks provided by the UDP and TCP protocols. How these connections are handled at each end is a more relevant problem for application development, which is what we'll look at now."),(0,o.kt)("h2",null,"Where do we use connections?"),(0,o.kt)("p",null,"You're using them right now. Your browser made a connection to the web server that's hosting this blog, using which it fetched the bytes that make up the HTML, CSS, JavaScript and images that you're looking at. If you're using the HTTP/1.1 protocol, your browser made multiple connections to the server, one for each file. If you used HTTP/2, many of the files were likely served over the same connection, using ",(0,o.kt)("em",{parentName:"p"},"multiplexing"),". In these cases your browser was the ",(0,o.kt)("em",{parentName:"p"},"client")," and the blog server was... well, the ",(0,o.kt)("em",{parentName:"p"},"server"),"."),(0,o.kt)("p",null,"But the server also made connections of its own to give you this page. It used a connection to speak to a database, sending over the URL of this page inside a query and receiving the contents of the page in return. In this scenario, the application server was the ",(0,o.kt)("em",{parentName:"p"},"client")," and the database server was the ",(0,o.kt)("em",{parentName:"p"},"server"),". The application server might have also made connections to other third-party services, like a subscription or payment service, or a location service."),(0,o.kt)("p",null,"For static files, like the JS, CSS and images, there's a CDN system in between your browser and the blog server. A connection was made from your browser (client) to the CDN server (server) that's closest to you, and if the files weren't available in the cache near you there would have been another connection from the CDN server (client) to the blog server (server)."),(0,o.kt)("p",null,"If you think carefully about all the systems you use or build, you'll see connections all over the place\u2014but they're often hidden from view, and not understanding their invisible presence and limits will come back to bite you when (and where) you least expect it."),(0,o.kt)("h2",null,"Why is connection handling important?"),(0,o.kt)("p",null,"Understanding how connections are handled is important because the cost of connections is ",(0,o.kt)("em",{parentName:"p"},"asymmetric"),"\u2014the cost is different on the client and server. In a peer to peer (P2P) system, like a torrent cloud, this is false, and connections have the same cost at both ends\u2014but this is rarely the case. The common uses of connections have a client and a server, and the cost to the server is different from the cost to the client."),(0,o.kt)("p",null,"Before we look at how connections can be handled, we need to quickly review the different ways in which computers run programs and how programs do work in parallel. When you run a program, the operating system runs your code as one instance of a ",(0,o.kt)("em",{parentName:"p"},"process"),". A ",(0,o.kt)("em",{parentName:"p"},"process")," occupies one CPU core and some memory when it's running, and does not share its memory with any other processes. The process can start ",(0,o.kt)("em",{parentName:"p"},"threads"),", which are like children of the process that can run concurrently",(0,o.kt)("em",{parentName:"p"},". Threads")," share memory with the process that spawned them, and might allocate more memory for their use. Or the process might use an ",(0,o.kt)("em",{parentName:"p"},"event loop"),", which is a single-processes system that keeps track of tasks it has to do and loops over all its tasks continuously and infinitely, each time doing the tasks that it can, or skipping them if they're blocked. Or the process might use internal constructs called ",(0,o.kt)("em",{parentName:"p"},"fibers, green-threads, coroutines,")," or _actors\u2014_each of these work a little differently and having varying costs\u2014but they're all managed internally by the process and its threads."),(0,o.kt)("p",null,"Coming back to how connections are handled, let's look at database connections first\u2014from your application server (the client in this case), you see a TCP connection paid for with a small memory buffer and one port allocation. On the server side, if you're using PostgreSQL, each connection is ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://brandur.org/postgres-connections"}),"handled")," at the server by spawning a new process that handles all the queries being sent over that connection. This process occupies a CPU core, and about 10MB or more of memory in RAM. MySQL ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://mysqlserverteam.com/mysql-connection-handling-and-scaling/"}),"handles")," each connection by spawning a thread inside of a process. The RAM/memory requirements are much lower in a threaded model, but it comes at the cost of context switching those threads. Redis ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://redis.io/topics/clients"}),"handles")," each connection as an iteration in an event loop, which makes the resource costs low\u2014but a price is paid in having to loop over every connection's queries and serving them strictly one at a time."),(0,o.kt)("p",null,"Consider a request to an application server. Your browser initiates a TCP connection as a client, which is cheap (small memory buffer and one port). On the server, the story is different. If the server is using Ruby on Rails, each connection is handled by one thread spawned inside a fixed number of running processes (the ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://puma.io"}),"Puma")," web server) or by one process (",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/defunkt/unicorn"}),"Unicorn"),"). If it's using PHP, the CGI systems start a new PHP process for each connection, and the more popular ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://en.wikipedia.org/wiki/FastCGI"}),"FastCGI")," systems keep a few of the processes running to make handling the next connection faster. If you're using Go, one ",(0,o.kt)("em",{parentName:"p"},"goroutine")," (a cheap and light thread-like structure, managed & scheduled internally by the Go runtime) will be spawned to handle each connection. If you're using NodeJS/Deno, the incoming connections are handled in an event loop by iterating over them and responding to requests one at a time. In systems like Erlang/Elixir, each connection will be handled by an ",(0,o.kt)("em",{parentName:"p"},"actor"),", which is another internally scheduled lightweight thread-like construct."),(0,o.kt)("h2",null,"Connection Handling Architectures"),(0,o.kt)("p",null,"The examples of how connections are handled have a few common strategies which we can identify:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Processes:")," Each connection is handled by a separate process, either started exclusively for the connection (CGI, PostgreSQL), or maintained as part of a group of available processes (Unicorn, FastCGI)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Threads:")," Each connection is handled by a separate thread, either spawned exclusively for the connection or held in reserve after spawning. The threads might be spread over multiple processes, but all threads are equivalent (Puma/Ruby, Tomcat/Java, MySQL)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Event Loop:")," Each connection is an task in the event loop, and connections that have data to be read are processed by iterating over them (Node, Redis). These systems are normally single-process and single-threaded, but they may sometimes be multi-process, where each process acts as a semi-independent system with separate event loops."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Coroutines / Green-Threads / Fibers / Actors:")," Each connection is handled by a lightweight construct whose scheduling is managed internally (Go, Erlang, Scala/Akka)."),(0,o.kt)("p",null,"Knowing how your server is handling connections is crucial to understanding what its limits and scaling patterns are. Even basic usage or configuration requires knowledge of how the connection handling works: Redis and PostgreSQL, for example, offer different transaction & locking semantics that are influenced by their respective connection handling mechanisms. Process & thread based servers can crash because of resource exhaustion if their max counts are not set to a reasonable limit, and when limits are set they might be horribly under-utilized because the limits are too low. Event-loop based systems may not benefit at all from running on 64-core CPUs, unless 64 copies of them are configured to run simultaneously\u2014which works great for web servers but not very often with databases."),(0,o.kt)("p",null,"Each of these ways of handling connections perform differently when used in application servers and databases, because of the distributed or centralized nature of each system. Application servers, for instance, tend to be horizontally scalable\u2014they work correctly and in the same way whether you have 1 server or 10 or 10,000. In these cases, Moving away from the process / thread model tends to result in higher performance, because we want as much work to be done with minimal memory usage and CPU context switching. Event loops like Node work great on single core servers, but need to be clustered correctly to use multi-core severs. Coroutine / actor based systems like Go or Erlang will utilise every core of the CPU much easier because they're designed to work that way, with many thousands of goroutines or actors running simultaneously on a single machine."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Centralized databases"),", on the other hand, benefit more from process / thread / event loop handling, because based on the transactional guarantees of the system we don't want multiple connections operating on the same data at the same time. The operations happening on multiple connections will have to lock during the transaction-sensitive parts of their work, or use other strategies like ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://www.postgresql.org/docs/current/mvcc-intro.html"}),"MVCC"),", and the fewer possible connection handlers there are the better. These systems support a few connections on a single machine. On large server, PostgreSQL might manage a few hundred connections, MySQL might handle a couple thousand. Redis can handle the highest number of connections (maybe tens of thousands) because it manages to keep data consistent using an event loop\u2014but this means that only one operation can happen at a time, so it's not a free lunch."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Distributed databases")," can and will attempt to move away from the process and thread based model: because they're spreading data across multiple machines, they usually give up locking, embrace partitioning, and design for high connection volume across a large number of servers. AWS DynamoDB or Google Datastore for instance, or many distributed databases written in Go, will happily accept millions or billions of simultaneous connections. These decisions have consequences, though\u2014they sacrifice a lot of the operations (joins, ad-hoc queries) and consistency guarantees provided by centralized / single-server databases. In return for this sacrifice, they can handle connections in a partitioned, horizontally scalable, practically unlimited way, allowing them to choose a design that supports many connections across many machines. This makes connections a non-issue here\u2014each individual sever must worry about its connection handling, but in aggregate, across thousands or millions of machines with smart connection routing, these systems often behave like they're infinitely scalable."),(0,o.kt)("h2",null,"[","What's | Why","]"," a Pool?"),(0,o.kt)("p",null,"We need to be efficient and frugal with expensive connections. It often isn't easy to realize how expensive they are because of the asymmetry: from the client's point of view they look cheap\u2014it's usually the server that has a problem with too many connections."),(0,o.kt)("p",null,"When a client performs work, it does not have the luxury of being able to use one connection for one piece of work. An application server, for instance, accesses a database as a client over a connection. If it were to initiate a new connection for each request, it becomes artificially limited in its own capacity by the connection capacity of the database that it's connecting to. There are a few cases where this usage is perfectly efficient\u2014that might happen if the application server is purely a proxy for the database. In reality, the application servers are doing many other things: waiting for the request data to come in to the server, parsing the request, formulating a query, sending the query over the database connection, waiting for the results, parsing the results from the database connection protocol, reading or manipulating the result data, transforming the output into HTML/JSON/RPC formats, making network requests other services and more. The connection remains idle for most of this time, which means an expensive resource is not being used efficiently. And all this doesn't even take into consideration the setup (process start, authentication) and shutdown costs of the connection on the server side."),(0,o.kt)("p",null,"To increase the efficiency of connection usages, many database clients will use what's called a ",(0,o.kt)("em",{parentName:"p"},"connection pool"),". A ",(0,o.kt)("em",{parentName:"p"},"pool")," is an object that maintains a set of connections internally, without allowing direct access or usage. These connections are given out by the pool when communication with the database needs to happen, and returned to the pool when the communication is finished. The pool may be initialized with a configured number of connections, or it may be filled up lazily on-demand. The ideal usage of a connection pool would be that code requests a connection from the pool (called a ",(0,o.kt)("em",{parentName:"p"},"checkout"),") just when it needs to use it, uses it, and puts it back in the pool (a ",(0,o.kt)("em",{parentName:"p"},"release"),") immediately. This way, the code is not holding on to the connection while all the other non-connection related work is being done, greatly increasing efficiency. This allows many pieces of work to be done using one or a few connections. If all the connections in a pool are in use when a new ",(0,o.kt)("em",{parentName:"p"},"checkout")," is requested, the requester will usually be made to wait (will ",(0,o.kt)("em",{parentName:"p"},"block"),") until a connection has been ",(0,o.kt)("em",{parentName:"p"},"released"),"."),(0,o.kt)("p",null,"Different languages and frameworks will handle pooling differently. Ruby on Rails, for instance, handles checking out and release connections back into the pool automatically\u2014but not understanding this leads to inefficient code. If you make a database request, followed by a long network request to another service, and another database request, the connection would have been held idle while the network request was happening (Rails auto-management needs to be conservative and cautious, therefore inefficient). Go has a standard library database driver that automatically uses a connection pool, but not realizing that connections are being released into the pool between database calls leads to surprising and hard-to-reproduce bugs. Developers sometimes assume that sequential operations in the same request will run on the same connection, but the automatic manager will swap connections out under you (Postgres ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://www.postgresql.org/docs/current/explicit-locking.html#ADVISORY-LOCKS"}),"advisory")," locks ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://engineering.qubecinema.com/2019/08/26/unlocking-advisory-locks.html"}),"heisenbug spectacularly")," in Go)."),(0,o.kt)("p",null,"Transactions compound this problem: databases often base transaction functionality on a connection (sometimes called a ",(0,o.kt)("em",{parentName:"p"},"session"),"). If you start a transaction, you can commit it or roll it back only on the same connection that you started it on. Automatic pool management needs to be careful not to release connections while a transaction is in progress. Depending on the database, other functions like locks and prepared statements might also have connection affinity."),(0,o.kt)("p",null,"So if we want to write efficient code, \xa0we need to know how connection pooling is happening in our framework, how much management is happening automatically, and when this management doesn't work or is counter-productive. One common tool that helps take this off your mind is a ",(0,o.kt)("em",{parentName:"p"},"pooling proxy"),", like ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://pgdash.io/blog/pgbouncer-connection-pool.html"}),"pgBouncer"),", ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/yandex/odyssey"}),"Odyssey")," or ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://aws.amazon.com/rds/proxy/"}),"AWS RDS Proxy"),". These systems allow you to make as many database connections as you want without worrying about management, because the connections they give you are fake & cheap simulated connections that they handle with low overhead. When you attempt to use one of these simulated connections, they pull out a real connection from an internal pool and map your fake connection on to the real one. After the proxy sees that you've finished using the connection, it keeps your fake connection open, but aggressively releases and re-uses the real connection. The connection counts and release-aggressiveness settings are configurable and help you tune for the gotchas like transactions, prepared statements, and locks."),(0,o.kt)("p",null,"Whether you choose to understand and manage connections efficiently in your code, or use a tool like pgBouncer, is ultimately a productivity and deployment complexity choice. Either option can work based on how much code you want to write, how easy connection management is in your chosen language, and how much efficiency you need in your project."),(0,o.kt)("p",null,"Pooling isn't limited to database clients. We've been referring to connections as cheap on the client side, but they are not zero cost. They do use memory and ports and file descriptors on the client, which are not infinite resources. For this reason many languages / libraries will have a connection pool for HTTP connections made to the same server, and will also use pooling for other scarce resources. These pools tend to be hidden out of sight until a system runs out of the scarce resource, at which point it usually crashes. Knowing this helps a lot with debugging problems\u2014besides connections, the other ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://www.networkworld.com/article/2693414/setting-limits-with-ulimit.html"}),"usual suspects")," are file descriptors. \xa0"),(0,o.kt)("h2",null,"Configuring Common Pools"),(0,o.kt)("p",null,"Now that we've seen how connections are commonly handled, we can talk about a few different application server + database combinations, and reason about how to maximize the number of requests we can handle on the application server while minimizing the database connection count. While not every combination is covered here, most systems will have the same characteristics as one of the examples we cover\u2014so knowing how these systems work will help you understand your own system even if it's not covered here. If you want me to add more combinations or systems, do ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://twitter.com/sudhirj"}),"let me know"),"."),(0,o.kt)("h3",null,"Process & Thread Based Handling"),(0,o.kt)("p",null,(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://puma.io/"}),"Puma"),", a popular application server, runs Ruby applications with two kinds of pooling for the handlers of incoming HTTP requests. The first lever is the number of processes to start, represented by the ",(0,o.kt)("inlineCode",{parentName:"p"},"workers")," configuration directive. Each process of the server is distinct and loads the full application stack independently into memory\u2014so if your application occupies ",(0,o.kt)("em",{parentName:"p"},"N")," MB or RAM, you'll need to make sure you have at least ",(0,o.kt)("inlineCode",{parentName:"p"},"workers * N")," MB of RAM to run that many copies of it. There is a way to alleviate this: Ruby 2+ supports the ",(0,o.kt)("em",{parentName:"p"},"copy-on-write")," feature, which allows multiple processes to start as a single process and fork into multiple processes without necessarily copying all the memory\u2014a lot of common memory areas will be shared until they're modified in some way. Activating copy-on-write using the ",(0,o.kt)("inlineCode",{parentName:"p"},"preload_app!")," directive ",(0,o.kt)("em",{parentName:"p"},"might")," help you use less memory than the full multiple of the application size and the number of workers\u2014but don't count on it too much without testing how much of an advantage it gives you under sustained load."),(0,o.kt)("p",null,"Purely process based servers like ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/defunkt/unicorn"}),"Unicorn")," stop at this level of configuration, as do the ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://www.fullstackpython.com/wsgi-servers.html"}),"popular servers for Python"),", PHP and other languages that use a global lock or assume single-threaded single-process execution. Each process can handle one request at a time, but this doesn't guarantee full utilization\u2014if the process is waiting on a database query or a network request to another service, it's not going to pick up a new request, and the CPU core that it's on remains idle. To counter this wastage, you might start more processes than you have CPU cores (which results in context switching costs) or use threads."),(0,o.kt)("p",null,"Which brings us to the second lever Puma gives you\u2014the number of ",(0,o.kt)("em",{parentName:"p"},"threads")," to run in each of the processes / ",(0,o.kt)("em",{parentName:"p"},"workers")," you've configured. Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"threads")," directive allows you configure the minimum and maximum number of threads in each worker's ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/puma/puma#thread-pool"}),"thread pool"),". Using these two directives allows you to control the total number of threads that will act as simultaneous request handlers for you application\u2014this is simply the number of workers multiplied by the number of threads."),(0,o.kt)("p",null,"A rule of thumb would be to place one worker for each CPU core you have available\u2014assuming, of course, that you have enough memory to do so. This utilizes your RAM effectively, so you can plan how much RAM you need based on a few tests with this number. Now we want to fully utilize the CPU\u2014and we do this by increasing the max thread count. You'll remember that threads share memory with their process, so they don't contribute much towards raising your RAM requirements\u2014instead more threads will further utilize your CPU while allowing your to handle more requests simultaneously. This is helpful because when one thread is sleeping because it's waiting on a database query or network request, another thread from the same process can quickly be switched into the CPU core to do its work. But remember that many threads will also cause contention on the process locks, so you will discover a limit to how many threads you can add while still seeing a meaningful increase in performance."),(0,o.kt)("p",null,"How does all this configuration affect the number of database connections, though? Rails uses automatic connection management on the database, so each thread that you run will need its own database connection to function effectively, without waiting on others. It maintains a connection pool configured in the ",(0,o.kt)("inlineCode",{parentName:"p"},"database.yml")," file, and this configuration applies at a process / worker level. So if the default value of ",(0,o.kt)("inlineCode",{parentName:"p"},"5")," is left as-is, Rails will maintain a maximum of 5 connections per worker. This won't work very well if you're changing the max thread count\u2014your many threads will all fight over the 5 connections in the pool. A rule of thumb would be to configure the ",(0,o.kt)("inlineCode",{parentName:"p"},"pool")," count to be equal to the max ",(0,o.kt)("inlineCode",{parentName:"p"},"threads")," count, as noted in the ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://devcenter.heroku.com/articles/concurrency-and-database-connections#connection-pool"}),"Heroku Puma deployment guide"),"."),(0,o.kt)("p",null,"Now this raises a new problem\u2014having ",(0,o.kt)("inlineCode",{parentName:"p"},"workers * threads")," database connections is great for application server performance, but will wreak havoc on a database like PostgreSQL and sometimes on MySQL. Depending on how much RAM (in the case of Postgres) and how much CPU (in the case of MySQL) you have, this configuration might not work for you. You might decide to reduce the ",(0,o.kt)("inlineCode",{parentName:"p"},"pool")," or max ",(0,o.kt)("inlineCode",{parentName:"p"},"threads")," value to make sure you have fewer connections, or the ",(0,o.kt)("inlineCode",{parentName:"p"},"workers")," value, or both. Depending on your application, all are likely to have the same effect\u2014if every request requires database queries, the number of database connections you have is the ultimate bottleneck for the number of requests you can handle. But if some requests can function without database access, you can get away with keeping the ",(0,o.kt)("inlineCode",{parentName:"p"},"workers")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"threads")," count high, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"pool")," number relatively low\u2014that way many threads will service your requests, but only a smaller subset will actually fight over the database connections in the pool as and when they need them. You can also to this if you take over connection management in your code and make sure to checkout and release connections efficiently\u2014this is especially important if you're making network requests between database calls."),(0,o.kt)("p",null,"If you find that it's difficult to properly mange connections or tune these numbers, and your application server is being artificially limited by the database connection limits, you can then reach for a tool like pgBouncer, Odyssey, AWS RDS Proxy. Setting up a pooling proxy will allow you to set your pool size to be equal to the max thread count, and be confident that the proxy will make things efficient for you."),(0,o.kt)("p",null,"When it comes to databases, PostgreSQL ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://www.citusdata.com/blog/2017/05/10/scaling-connections-in-postgres/"}),"uses process based handlers"),", so you'd want to be relatively stringent about connection counts when using it. MySQL ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://mysqlserverteam.com/mysql-connection-handling-and-scaling/"}),"uses threads"),", so you could get away with making more connections to it\u2014although this can result in performance drops because of context switching and locking."),(0,o.kt)("h3",null,"Event-Loop Based Handling"),(0,o.kt)("p",null,"Node / Deno is the first event-loop based server we're looking at. This implies that starting a server with the default configurations will very effectively use the one CPU core that it's running on, but will basically ignore the others. The internal subsystems and libraries may use the other cores, but for now we're more interested in directly using them\u2014and the way we do this is ",(0,o.kt)("em",{parentName:"p"},"clustering"),". Clustering is achieved by starting one process that accepts all incoming connections, which then acts as proxy and distributes the connections over other processes running on the same machine. Node has a standard library ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://nodejs.org/api/cluster.html"}),"clustering module"),", and popular servers like ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://pm2.keymetrics.io/docs/usage/cluster-mode/"}),"PM2")," will use it effectively for you. The rule of thumb would be to run as many processes as there are CPU cores available, assuming there's enough memory, of course."),(0,o.kt)("p",null,"Stripe also published the interesting ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/stripe/einhorn"}),"Einhorn project"),", which is a connection manager that exists outside of the stack you're writing code in. It starts its own process that accepts connections, and distributes them to instances of your application that it starts and manages as child processes. A tool like this is very useful in even loop based systems, which will make sure they fully utilize one CPU core given the chance\u2014but it's not as useful by itself with Ruby/Python, because while it would allow you to have multiple processes, the lack of threads mean that each processes would only be able to service one request at a time."),(0,o.kt)("p",null,"The clustered event loop approach is also used by systems that modify the default behaviour of a normally process based language. The ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://www.tornadoweb.org/en/stable/"}),"Tornado")," server for Python, for example, converts Python request handling into an event-loop based system, also referred to as ",(0,o.kt)("em",{parentName:"p"},"non-blocking I/O"),". It can also be ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://www.tornadoweb.org/en/stable/guide/running.html#processes-and-ports"}),"configured")," to cluster itself on all available CPU cores, assuming enough memory."),(0,o.kt)("p",null,"A similar approach is also used in the ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://socketry.github.io/falcon/index.html"}),"Falcon")," web-server for Ruby. Newer versions of Ruby a kind of ",(0,o.kt)("em",{parentName:"p"},"green-thread")," called ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",Object.assign({parentName:"em"},{href:"https://ruby-doc.org/core-3.0.0/Fiber.html"}),"Fibers")),", and Falcon handles each incoming request with one Ruby ",(0,o.kt)("em",{parentName:"p"},"Fiber"),". Fibers do not automatically spread themselves across all CPU cores, so Falcon ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/socketry/async-container"}),"starts a copy")," of your application in every available CPU core\u2014again assuming there's enough memory."),(0,o.kt)("p",null,"In all these cases, you'd want to configure your connection pools in your database adapters to limit the number of connections each process can make\u2014or you might use a pooling proxy if your application servers are being limited by the database connection limits, or if managing connection checkout and release is getting difficult."),(0,o.kt)("p",null,"Redis ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://redis.io/topics/clients"}),"handles")," connections with an event loop. This means that it can hold as many connections as its port, file descriptor, and memory resources allow\u2014but it handles each operation from each connection one at a time."),(0,o.kt)("h3",null,"Internally Managed / Custom Handling"),(0,o.kt)("p",null,"The poster child for this kind of handling is ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://golang.org/"}),"Go"),", which unlike all the other examples is completely unconstrained in the way it handles requests\u2014it will unleash itself on your CPU and RAM with no restrictions. Every incoming request is handled by a new ",(0,o.kt)("em",{parentName:"p"},"goroutine"),", a lightweight thread-like construct that the Go runtime internally manages and schedules much more efficiently than threads or processes. Go will also automatically spread its ",(0,o.kt)("em",{parentName:"p"},"goroutines")," across all the CPU cores you have, although you can rein it in a bit with the ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://golang.org/pkg/runtime/#GOMAXPROCS"}),(0,o.kt)("inlineCode",{parentName:"a"},"runtime.GOMAXPROCS"))," setting\u2014and because this happens as part of the runtime, there is no memory copying happening. Go runs across all your CPU cores ",(0,o.kt)("em",{parentName:"p"},"without")," having to start a new copy of your application on each of them."),(0,o.kt)("p",null,"Because Go is automatically geared for tens of thousands of simultaneous requests even on very small servers, pairing it with a process-based database like PosgreSQL is often like driving a race-car into a brick wall. If each goroutine is using the standard library ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://golang.org/pkg/database/sql/"}),"SQL")," package, it will create as many connections as there are goroutines because the default pool size is unlimited. The first thing you'd want to do on any Go application using a SQL DB is to ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://www.alexedwards.net/blog/configuring-sqldb"}),"configure the connection limits")," using ",(0,o.kt)("inlineCode",{parentName:"p"},"SetMaxOpenConns")," and the associated options. Go uses an internal pool on the ",(0,o.kt)("inlineCode",{parentName:"p"},"sql")," package, so each query you run will checkout a connection from the pool, use it and release it back immediately. This means that if you want to execute a transaction, you ",(0,o.kt)("em",{parentName:"p"},"must")," use the ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://golang.org/pkg/database/sql/#Conn.BeginTx"}),"special methods")," that give you an object that wraps the connection you started the transaction on, which is the only way you can later commit or rollback that transaction. This is also every important when using other functions that are connection specific, like prepared statements or advisory locks."),(0,o.kt)("p",null,"This automatic approach an unexpected benefit: it removes the need for pooling proxies, because the connections are already managed very aggressively. The database calls you make have efficient connection management by default, and when you do take over a connection it's just as efficient as using a pooling proxy anyway. Systems that work this way default to doing the efficient thing, at the cost of you having to learn about how to handle the edge cases where you do want manual control. Besides the usual prepared statements and advisory locks gotchas, manually managing connections this also has potential deadlock problems. If a max connection count is configured and some requests try to checkout more than one connection simultaneously to do their work, there's a chance they'll get stuck forever waiting for each other to release connections. The ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing"}),"pool sizing notes")," on ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/brettwooldridge/HikariCP"}),"HikariCP")," have formulae that help address problems like this."),(0,o.kt)("p",null,"Other VM based languages, like ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://stackoverflow.com/questions/4436422/how-does-java-makes-use-of-multiple-cores"}),"Java"),", ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://akka.io/"}),"Scala/Akka"),", Clojure, ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://kotlinlang.org/docs/reference/coroutines-overview.html"}),"Kotlin")," (all on the JVM) and Elixir/Erlang (on the ",(0,o.kt)("a",Object.assign({parentName:"p"},{href:"https://medium.com/flatiron-labs/elixir-and-the-beam-how-concurrency-really-works-3cc151cddd61"}),"BEAM")," VM) will function similarly, where using all available cores on a CPU will be possible without starting a new copy of the application on each one. Each specific system or database connection library will usually have slightly different implementations, but they should be understandable using one or more of the concepts described here."))}r.isMDXComponent=!0},9008:function(e,t,n){e.exports=n(5443)}},function(e){e.O(0,[774,888,179],(function(){return t=163,e(e.s=t);var t}));var t=e.O();_N_E=t}]);